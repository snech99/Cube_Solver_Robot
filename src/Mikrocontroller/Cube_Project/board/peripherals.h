/***********************************************************************************************************************
 * This file was generated by the MCUXpresso Config Tools. Any manual edits made to this file
 * will be overwritten if the respective MCUXpresso Config Tools is used to update this file.
 **********************************************************************************************************************/

#ifndef _PERIPHERALS_H_
#define _PERIPHERALS_H_

/***********************************************************************************************************************
 * Included files
 **********************************************************************************************************************/
#include "fsl_common.h"
#include "fsl_lpuart.h"
#include "fsl_clock.h"
#include "fsl_lpi2c.h"
#include "fsl_gpio.h"
#include "fsl_port.h"
#include "fsl_ctimer.h"
#include "fsl_pwm.h"

#if defined(__cplusplus)
extern "C" {
#endif /* __cplusplus */

/***********************************************************************************************************************
 * Definitions
 **********************************************************************************************************************/
/* Definitions for BOARD_InitPeripherals functional group */
/* Definition of peripheral ID */
#define LPUART2_PERIPHERAL LPUART2
/* Definition of the clock source frequency */
#define LPUART2_CLOCK_SOURCE 96000000UL
/* LPUART2 interrupt vector ID (number). */
#define LPUART2_SERIAL_RX_TX_IRQN LPUART2_IRQn
/* LPUART2 interrupt handler identifier. */
#define LPUART2_SERIAL_RX_TX_IRQHANDLER LPUART2_IRQHandler
/* BOARD_InitPeripherals defines for LPI2C0 */
/* Definition of peripheral ID */
#define LPI2C0_PERIPHERAL LPI2C0
/* Definition of clock source */
#define LPI2C0_CLOCK_FREQ 12000000UL
/* Definition of slave address */
#define LPI2C0_MASTER_SLAVE_ADDRESS 60
/* Alias for GPIO1 peripheral */
#define GPIO1_GPIO GPIO1
/* Alias for PORT1 */
#define GPIO1_PORT PORT1
/* GPIO1 interrupt vector ID (number). */
#define GPIO1_IRQN GPIO1_IRQn
/* GPIO1 interrupt handler identifier. */
#define GPIO1_IRQHANDLER GPIO1_IRQHandler
/* Definition of peripheral ID */
#define CTIMER0_PERIPHERAL CTIMER0
/* Timer tick frequency in Hz (input frequency of the timer) */
#define CTIMER0_TICK_FREQ 8000000UL
/* Timer tick period in ns (input period of the timer) */
#define CTIMER0_TICK_PERIOD 125UL
/* Definition of PWM period channel. */
#define CTIMER0_PWM_PERIOD_CH kCTIMER_Match_0
/* Definition of channel 0 ID */
#define CTIMER0_MATCH_0_CHANNEL kCTIMER_Match_0
/* CTIMER0 interrupt vector ID (number). */
#define CTIMER0_TIMER_IRQN CTIMER0_IRQn
/* Definition of peripheral ID */
#define FLEXPWM0_PERIPHERAL FLEXPWM0
/* Definition of submodule 0 ID */
#define FLEXPWM0_ALL_PWM kPWM_Module_0
/* Definition of clock source of submodule 0 frequency in Hertz */
#define FLEXPWM0_ALL_PWM_SM_CLK_SOURCE_FREQ_HZ 96000000U
/* Definition of submodule 0 counter clock source frequency in Hertz - FLEXPWM0_ALL_PWM_SM_CLK_SOURCE_FREQ_HZ divided by prescaler */
#define FLEXPWM0_ALL_PWM_COUNTER_CLK_SOURCE_FREQ_HZ 750000U
/* Definition of submodule 0 counter (PWM) frequency in Hertz */
#define FLEXPWM0_ALL_PWM_COUNTER_FREQ_HZ 200U
/* Definition of submodule 0 channel A ID */
#define FLEXPWM0_ALL_PWM_CHANNEL_ALL kPWM_PwmA
/* Definition of submodule 0 channel B ID */
#define FLEXPWM0_ALL_PWM_B kPWM_PwmB
/* Definition of submodule 0 channel X ID */
#define FLEXPWM0_ALL_PWM_X kPWM_PwmX
/* FLEXPWM0 interrupt vector ID (number). */
#define FLEXPWM0_COMMON_SM_0_IRQN FLEXPWM0_SUBMODULE0_IRQn
/* FLEXPWM0 interrupt handler identifier. */
#define INTERRUPT_PWM FLEXPWM0_SUBMODULE0_IRQHandler
/* Definition of submodule 1 ID */
#define FLEXPWM0_SERVO_PWM kPWM_Module_1
/* Definition of clock source of submodule 1 frequency in Hertz */
#define FLEXPWM0_SERVO_PWM_SM_CLK_SOURCE_FREQ_HZ 96000000U
/* Definition of submodule 1 counter clock source frequency in Hertz - FLEXPWM0_SERVO_PWM_SM_CLK_SOURCE_FREQ_HZ divided by prescaler */
#define FLEXPWM0_SERVO_PWM_COUNTER_CLK_SOURCE_FREQ_HZ 750000U
/* Definition of submodule 1 counter (PWM) frequency in Hertz */
#define FLEXPWM0_SERVO_PWM_COUNTER_FREQ_HZ 77U
/* Definition of submodule 1 channel A ID */
#define FLEXPWM0_SERVO_PWM_A kPWM_PwmA
/* Definition of submodule 1 channel B ID */
#define FLEXPWM0_SERVO_PWM_SERVO kPWM_PwmB
/* Definition of submodule 1 channel X ID */
#define FLEXPWM0_SERVO_PWM_X kPWM_PwmX
/* Definition of fault Fault0 ID */
#define FLEXPWM0_F0_FAULT0 kPWM_Fault_0
/* Definition of fault Fault1 ID */
#define FLEXPWM0_F0_FAULT1 kPWM_Fault_1
/* Definition of fault Fault2 ID */
#define FLEXPWM0_F0_FAULT2 kPWM_Fault_2
/* Definition of fault Fault3 ID */
#define FLEXPWM0_F0_FAULT3 kPWM_Fault_3
/* Definition of peripheral ID */
#define CTIMER1_PERIPHERAL CTIMER1
/* Timer tick frequency in Hz (input frequency of the timer) */
#define CTIMER1_TICK_FREQ 8000000UL
/* Timer tick period in ns (input period of the timer) */
#define CTIMER1_TICK_PERIOD 125UL
/* Definition of PWM period channel. */
#define CTIMER1_PWM_PERIOD_CH kCTIMER_Match_0
/* Definition of channel 0 ID */
#define CTIMER1_MATCH_0_CHANNEL kCTIMER_Match_0
/* CTIMER1 interrupt vector ID (number). */
#define CTIMER1_TIMER_IRQN CTIMER1_IRQn
/* Alias for GPIO2 peripheral */
#define GPIO2_GPIO GPIO2
/* Alias for PORT2 */
#define GPIO2_PORT PORT2
/* GPIO2 interrupt vector ID (number). */
#define GPIO2_IRQN GPIO2_IRQn
/* GPIO2 interrupt handler identifier. */
#define GPIO2_IRQHANDLER GPIO2_IRQHandler
/* Alias for GPIO3 peripheral */
#define GPIO3_GPIO GPIO3
/* Alias for PORT3 */
#define GPIO3_PORT PORT3
/* GPIO3 interrupt vector ID (number). */
#define GPIO3_IRQN GPIO3_IRQn
/* GPIO3 interrupt handler identifier. */
#define GPIO3_IRQHANDLER GPIO3_IRQHandler
/* Definition of peripheral ID */
#define CTIMER2_PERIPHERAL CTIMER2
/* Timer tick frequency in Hz (input frequency of the timer) */
#define CTIMER2_TICK_FREQ 12000000UL
/* Timer tick period in ns (input period of the timer) */
#define CTIMER2_TICK_PERIOD 83UL
/* Definition of PWM period channel. */
#define CTIMER2_PWM_PERIOD_CH kCTIMER_Match_0
/* Definition of channel 0 ID */
#define CTIMER2_MATCH_0_CHANNEL kCTIMER_Match_0
/* CTIMER2 interrupt vector ID (number). */
#define CTIMER2_TIMER_IRQN CTIMER2_IRQn

/***********************************************************************************************************************
 * Global variables
 **********************************************************************************************************************/
extern const lpuart_config_t LPUART2_config;
extern const lpi2c_master_config_t LPI2C0_masterConfig;
extern lpi2c_master_transfer_t LPI2C0_masterTransfer;
extern const ctimer_config_t CTIMER0_config;
extern const ctimer_match_config_t CTIMER0_Match_0_config;
extern pwm_config_t FLEXPWM0_ALL_PWM_config;

extern pwm_signal_param_t FLEXPWM0_ALL_PWM_pwm_function_config[1];
extern pwm_config_t FLEXPWM0_SERVO_PWM_config;

extern pwm_signal_param_t FLEXPWM0_SERVO_PWM_pwm_function_config[1];
extern const pwm_fault_input_filter_param_t FLEXPWM0_faultInputFilter_config;
extern const pwm_fault_param_t FLEXPWM0_Fault0_fault_config;
extern const pwm_fault_param_t FLEXPWM0_Fault1_fault_config;
extern const pwm_fault_param_t FLEXPWM0_Fault2_fault_config;
extern const pwm_fault_param_t FLEXPWM0_Fault3_fault_config;
extern const ctimer_config_t CTIMER1_config;
extern const ctimer_match_config_t CTIMER1_Match_0_config;
extern const ctimer_config_t CTIMER2_config;
extern const ctimer_match_config_t CTIMER2_Match_0_config;

/***********************************************************************************************************************
 * Callback functions
 **********************************************************************************************************************/
  /* Single callback function declaration */
extern void TIMER0_ISR_RESET_CALLBACK(uint32_t flags);
extern ctimer_callback_t CTIMER0_callback[];
  /* Single callback function declaration */
extern void TIMER1_CALLBACK_RAMPE(uint32_t flags);
extern ctimer_callback_t CTIMER1_callback[];
  /* Single callback function declaration */
extern void Busy_Timer(uint32_t flags);
extern ctimer_callback_t CTIMER2_callback[];

/***********************************************************************************************************************
 * Initialization functions
 **********************************************************************************************************************/

void BOARD_InitPeripherals(void);

/***********************************************************************************************************************
 * BOARD_InitBootPeripherals function
 **********************************************************************************************************************/
void BOARD_InitBootPeripherals(void);

#if defined(__cplusplus)
}
#endif

#endif /* _PERIPHERALS_H_ */
